package com.navink.wtp.first.servlet;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.navink.wtp.first.dao.FileDao;

/**
 * Servlet implementation class FileCounter
 */
@WebServlet("/FileCounter")
public class FileCounter extends HttpServlet {
	private static final long serialVersionUID = 1L;

	int count;
	private FileDao dao;
	static final int BUFFER_SIZE = 4096;

	@Override
	protected void doGet(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		// Set a cookie for the user, so that the counter does not increate
		// every time the user press refresh
		HttpSession session = request.getSession(true);
		String user = request.getParameter("name");
		if (user == null) {
			user = "Unknown";
		}
		// Set the session valid for 5 secs
		session.setMaxInactiveInterval(5);
		response.setContentType("text/plain");
		PrintWriter out = response.getWriter();
		if (session.isNew()) {
			count++;
		}
		out.println("This site has been accessed " + count + " times. Current accessor is " + user);
	}

	@Override
	public void init() throws ServletException {
		dao = new FileDao();
		try {
			count = dao.getCount();
		} catch (Exception e) {
			getServletContext().log("An exception occurred in FileCounter", e);
			throw new ServletException("An exception occurred in FileCounter"
					+ e.getMessage());
		}
	}

	@Override
	public void doPost(HttpServletRequest req, HttpServletResponse res) throws IOException {
//		ServletInputStream is = req.getInputStream();
//		int length = req.getContentLength();
//		byte [] byteArray = new byte[length];
//
//		int offset = 0;
//		int bytesRead = 0;
//		System.out.println("Reading bytes");
//		while((offset < byteArray.length) &&
//				((bytesRead=is.read(byteArray, offset, byteArray.length-offset))>=0)) {
//			offset += bytesRead;
//		}
//		is.close();
//		System.out.println("Writing bytes" + new String(byteArray));
//		FileOutputStream fos = new FileOutputStream("/Users/navink/buildCopy.xml");
//		fos.write(byteArray);
//		fos.close();
		File output = new File("/Users/navink/buildCopy.xml");
		InputStream inputStream = req.getInputStream();
		FileOutputStream outputStream = new FileOutputStream(output);
		
	}

	public void destroy() {
		super.destroy();
		try {
			dao.save(count);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
